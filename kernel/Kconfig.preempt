
choice
	prompt "Preemption Model"
	default PREEMPT_NONE

config PREEMPT_NONE
	bool "No Forced Preemption (Server)"
	help
	  This is the traditional Linux preemption model, geared towards
	  throughput. It will still provide good latencies most of the
	  time, but there are no guarantees and occasional longer delays
	  are possible.

	  Select this option if you are building a kernel for a server or
	  scientific/computation system, or if you want to maximize the
	  raw processing power of the kernel, irrespective of scheduling
	  latencies.

config PREEMPT_VOLUNTARY
	bool "Voluntary Kernel Preemption (Desktop)"
	help
	  This option reduces the latency of the kernel by adding more
	  "explicit preemption points" to the kernel code. These new
	  preemption points have been selected to reduce the maximum
	  latency of rescheduling, providing faster application reactions,
	  at the cost of slightly lower throughput.

	  This allows reaction to interactive events by allowing a
	  low priority process to voluntarily preempt itself even if it
	  is in kernel mode executing a system call. This allows
	  applications to run more 'smoothly' even when the system is
	  under load.

	  Select this if you are building a kernel for a desktop system.

config PREEMPT
	bool "Preemptible Kernel (Low-Latency Desktop)"
	help
	  This option reduces the latency of the kernel by making
	  all kernel code (that is not executing in a critical section)
	  preemptible.  This allows reaction to interactive events by
	  permitting a low priority process to be preempted involuntarily
	  even if it is in kernel mode executing a system call and would
	  otherwise not be about to reach a natural preemption point.
	  This allows applications to run more 'smoothly' even when the
	  system is under load, at the cost of slightly lower throughput
	  and a slight runtime overhead to kernel code.

	  Select this if you are building a kernel for a desktop or
	  embedded system with latency requirements in the milliseconds
	  range.

endchoice

choice
	prompt "RCU implementation type:"
	default CLASSIC_RCU

config CLASSIC_RCU
	bool "Classic RCU"
	help
	  This option selects the classic RCU implementation that is
	  designed for best read-side performance on non-realtime
	  systems.

	  Say Y if you are unsure.

config PREEMPT_RCU
	bool "Preemptible RCU"
	depends on PREEMPT
	help
	  This option reduces the latency of the kernel by making certain
	  RCU sections preemptible. Normally RCU code is non-preemptible, if
	  this option is selected then read-only RCU sections become
	  preemptible. This helps latency, but may expose bugs due to
	  now-naive assumptions about each RCU read-side critical section
	  remaining on a given CPU through its execution.

	  Say N if you are unsure.

endchoice

config RCU_TRACE
	bool "Enable tracing for RCU - currently stats in debugfs"
	select DEBUG_FS
	default y
	help
	  This option provides tracing in RCU which presents stats
	  in debugfs for debugging RCU implementation.

	  Say Y here if you want to enable RCU tracing
	  Say N if you are unsure.

config PREEMPT_SOFTIRQS
	bool "Thread Softirqs"
	default n
#	depends on PREEMPT
	help
	  This option reduces the latency of the kernel by 'threading'
	  soft interrupts. This means that all softirqs will execute
	  in softirqd's context. While this helps latency, it can also
	  reduce performance.

	  The threading of softirqs can also be controlled via
	  /proc/sys/kernel/softirq_preemption runtime flag and the
	  sofirq-preempt=0/1 boot-time option.

	  Say N if you are unsure.

config PREEMPT_HARDIRQS
	bool "Thread Hardirqs"
	default n
	depends on !GENERIC_HARDIRQS_NO__DO_IRQ
	select PREEMPT_SOFTIRQS
	help
	  This option reduces the latency of the kernel by 'threading'
	  hardirqs. This means that all (or selected) hardirqs will run
	  in their own kernel thread context. While this helps latency,
	  this feature can also reduce performance.

	  The threading of hardirqs can also be controlled via the
	  /proc/sys/kernel/hardirq_preemption runtime flag and the
	  hardirq-preempt=0/1 boot-time option. Per-irq threading can
	  be enabled/disable via the /proc/irq/<IRQ>/<handler>/threaded
	  runtime flags.

	  Say N if you are unsure.

config PREEMPT_BKL
	bool "Preempt The Big Kernel Lock"
	depends on SMP || PREEMPT
	default y
	help
	  This option reduces the latency of the kernel by making the
	  big kernel lock preemptible.

	  Say Y here if you are building a kernel for a desktop system.
	  Say N if you are unsure.

